---
- name: DevOps Toolchain Installation on Fedora
  hosts: all
  become: true

  vars:
    architecture: "arm64" # Set to "amd64" or "arm64"
    architecture_alias: "aarch64" # Set to "amd64" or "aarch64" as per architecture
    app_dir: /opt/apps
    java_url: "https://corretto.aws/downloads/latest/amazon-corretto-21-{{ architecture_alias }}-linux-jdk.tar.gz"
    python_url: "https://www.python.org/ftp/python/3.11.11/Python-3.11.11.tar.xz"
    golang_url: "https://go.dev/dl/go1.24.1.linux-{{ architecture }}.tar.gz"
    gitea_url: "https://dl.gitea.com/gitea/1.23.3/gitea-1.23.3-linux-{{ architecture }}"
    nexus_url: "https://download.sonatype.com/nexus/3/nexus-unix-{{ architecture_alias }}-3.78.1-02.tar.gz"
    jenkins_url: "https://get.jenkins.io/war-stable/latest/jenkins.war"
    sonarqube_url: "https://binaries.sonarsource.com/sonarqube/sonarqube-5.1.2.zip"
    database_users:
      - { name: "sonarqube", db: "sonarqube", password: "secretsqdppass#1", schema: "sonarqube_schema" }
      - { name: "gitea", db: "gitea", password: "secretgiteadppass#1", schema: "gitea_schema" }

  tasks:
    - name: Install required packages
      dnf:
        name:
          - openssl-devel
          - libffi-devel
          - zlib-devel
          - readline-devel
          - sqlite-devel
          - bzip2-devel
          - xz-devel
          - tk-devel
          - uuid-devel
          - gcc
          - gcc-c++
          - make
          - wget
          - xz
          - unzip
          - tar
          - systemd
          - git
        state: present

    - name: Create service users
      user:
        name: "{{ item }}"
        system: yes
        shell: /bin/bash
        create_home: yes
        home: "{{ app_dir }}/{{ item }}"
      loop:
        - gitea
        - nexus
        - jenkins
        - sonarqube

    - name: Create app directories
      file:
        path: "{{ app_dir }}/{{ item }}"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
      loop:
        - gitea
        - nexus
        - jenkins
        - sonarqube

    - name: Create Java and Python directories
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ app_dir }}/openjdk21"
        - "{{ app_dir }}/python3"

    - name: Correctly Install Corretto JDK21
      block:
        - name: Download Corretto JDK21
          get_url:
            url: "{{ java_url }}"
            dest: "/tmp/corretto-jdk.tar.gz"
            mode: '0644'
            force: no

        - name: Extract Corretto JDK21 to temporary location
          unarchive:
            src: "/tmp/corretto-jdk.tar.gz"
            dest: "/tmp"
            remote_src: yes
          args:
            creates: "/tmp/amazon-corretto-21.0.6.7.1-linux-{{ architecture_alias }}"

        - name: Move extracted Corretto JDK21 files to final directory
          shell: |
            mkdir -p {{ app_dir }}/openjdk21
            mv /tmp/amazon-corretto-21.0.6.7.1-linux-{{ architecture_alias }}/* {{ app_dir }}/openjdk21/
          args:
            creates: "{{ app_dir }}/openjdk21/bin/java"


    - name: Install Python 3.11
      shell: |
        cd /tmp
        if [ ! -f Python-3.11.11.tar.xz ]; then wget {{ python_url }}; fi
        tar -xf Python-3.11.11.tar.xz
        cd Python-3.11.11
        ./configure --prefix={{ app_dir }}/python3 --enable-optimizations
        make -j$(nproc)
        make install
      args:
        creates: "{{ app_dir }}/python3/bin/python3.11"

    - name: Download Golang
      get_url:
        url: "{{ golang_url }}"
        dest: "/tmp/golang.tar.gz"
        mode: '0644'
        force: no

    - name: Install Golang
      unarchive:
        src: "/tmp/golang.tar.gz"
        dest: "{{ app_dir }}"
        creates: "{{ app_dir }}/go"

    - name: Ensure openjdk21 ownership and executable permission
      file:
        path: "{{ app_dir }}/openjdk21"
        state: directory
        recurse: yes
        owner: root
        group: root
        mode: "0755"
      loop:
        - "{{ app_dir }}/openjdk21"
        - "{{ app_dir }}/python3"
        - "{{ app_dir }}/go"

    - name: Install PostgreSQL
      dnf:
        name: postgresql-server
        state: present

    - name: Initialize PostgreSQL database
      command: postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/PG_VERSION

    - name: Enable and start PostgreSQL service
      systemd:
        name: postgresql
        state: started
        enabled: true


    - name: Download Gitea binary
      get_url:
        url: "{{ gitea_url }}"
        dest: "{{ app_dir }}/gitea/gitea"
        mode: '0755'
        force: no

    - name: Setup Nexus
      unarchive:
        src: "{{ nexus_url }}"
        dest: "{{ app_dir }}/nexus"
        extra_opts: ["--strip-components=1"]
        remote_src: yes
        creates: "{{ app_dir }}/nexus/bin/nexus"

    - name: Ensure Sonatype-work directory structure exists with correct permissions
      file:
        path: "{{ app_dir }}/sonatype-work/nexus3"
        state: directory
        owner: nexus
        group: nexus
        mode: '0755'
        recurse: yes

    - name: Ensure correct ownership for Nexus application directory
      file:
        path: "{{ app_dir }}/nexus"
        state: directory
        owner: nexus
        group: nexus
        recurse: yes


    - name: Download Jenkins WAR
      get_url:
        url: "{{ jenkins_url }}"
        dest: "{{ app_dir }}/jenkins/jenkins.war"
        mode: '0644'
        force: no

    - name: Download SonarQube
      get_url:
        url: "{{ sonarqube_url }}"
        dest: "/tmp/sonarqube.zip"
        mode: '0644'
        force: no

    - name: Extract SonarQube
      unarchive:
        src: "/tmp/sonarqube.zip"
        dest: "/tmp"
        remote_src: yes

    - name: Find extracted SonarQube directory
      find:
        paths: "/tmp"
        patterns: "sonarqube-*"
        file_type: directory
      register: sonarqube_extracted_dir

    - name: Move SonarQube contents to app directory
      shell: |
        shopt -s dotglob
        mv {{ sonarqube_extracted_dir.files[0].path }}/* {{ app_dir }}/sonarqube/
      args:
        creates: "{{ app_dir }}/sonarqube/bin"

    - name: Check if SELinux is enabled
      command: getenforce
      register: selinux_status
      changed_when: false
      ignore_errors: true

    - name: Disable SELinux if enabled
      command: setenforce 0
      when: selinux_status.stdout == "Enforcing"


    - name: Ensure SELinux is permanently disabled
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: 'SELINUX=disabled'

    - name: Deploy systemd service files from Jinja templates
      template:
        src: "templates/{{ item }}.service.j2"
        dest: "/etc/systemd/system/{{ item }}.service"
        mode: '0644'
      loop:
        - gitea
        - nexus
        - jenkins
        - sonarqube

    - name: Reload systemd daemon
      systemd:
        daemon_reload: true

    - name: Enable and start systemd services
      systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - gitea
        - nexus
        - jenkins
        - sonarqube

    - name: Install prerequisites for Docker
      dnf:
        name:
          - dnf-plugins-core
        state: present

    - name: Add Docker CE repository
      command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker CE
      dnf:
        name: docker-ce
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Ensure Python, Java, and Go are in PATH globally
      copy:
        dest: /etc/profile.d/custom-path.sh
        content: |
          export PATH={{ app_dir }}/python3/bin:{{ app_dir }}/openjdk21/bin:{{ app_dir }}/go/bin:$PATH
        mode: '0755'

    - name: Ensure pip is installed explicitly
      command: "{{ app_dir }}/python3/bin/python -m ensurepip"
      args:
        creates: "{{ app_dir }}/python3/bin/pip3"

    - name: Install Docker Python library using custom Python interpreter
      pip:
        executable: "{{ app_dir }}/python3/bin/pip3"
        name: docker


    - name: Pull SonarQube Docker image (using custom Python interpreter)
      docker_image:
        name: sonarqube:latest
        source: pull
      vars:
        ansible_python_interpreter: "{{ app_dir }}/python3/bin/python3"


    - name: Enable and start PostgreSQL service
      systemd:
        name: postgresql
        state: started
        enabled: true

    - name: Install PostgreSQL Python dependencies
      pip:
        executable: "{{ app_dir }}/python3/bin/pip3.11"
        name:
          - psycopg2-binary

    - name: Create PostgreSQL databases and users
      include_tasks: pgsql_create_db.yml
      loop: "{{ database_users }}"
      loop_control:
        loop_var: item

    - name: Run SonarQube container
      docker_container:
        name: sonarqube
        image: sonarqube:latest
        state: started
        restart_policy: always
        ports:
          - "9000:9000"
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
          # SONAR_JDBC_URL: "jdbc:postgresql://localhost:5432/{{ database_users[0].db }}"
          # SONAR_JDBC_USERNAME: "{{ database_users[0].name }}"
          # SONAR_JDBC_PASSWORD: "{{ database_users[0].password }}"
        volumes:
          - sonarqube_data:/opt/apps/sonarqube/data
          - sonarqube_extensions:/opt/apps/sonarqube/extensions
          - sonarqube_logs:/opt/apps/sonarqube/logs
      vars:
        ansible_python_interpreter: "{{ app_dir }}/python3/bin/python3"