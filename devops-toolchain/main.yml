---
- name: DevOps Toolchain Installation on Fedora
  hosts: all
  become: true

  vars:
    architecture: "arm64" # Set to "amd64" or "arm64"
    architecture_alias: "aarch64" # Set to "amd64" or "aarch64" as per architecture
    app_dir: /opt/apps
    java_url: "https://corretto.aws/downloads/latest/amazon-corretto-21-{{ architecture_alias }}-linux-jdk.tar.gz"
    python_url: "https://www.python.org/ftp/python/3.11.11/Python-3.11.11.tar.xz"
    golang_url: "https://go.dev/dl/go1.24.1.linux-{{ architecture }}.tar.gz"
    gitea_url: "https://dl.gitea.com/gitea/1.23.3/gitea-1.23.3-linux-{{ architecture }}"
    nexus_url: "https://download.sonatype.com/nexus/3/nexus-unix-{{ architecture_alias }}-3.78.1-02.tar.gz"
    jenkins_url: "https://get.jenkins.io/war-stable/latest/jenkins.war"
    sonarqube_url: "https://binaries.sonarsource.com/sonarqube/sonarqube-5.1.2.zip"

  tasks:
    - name: Install required packages
      dnf:
        name:
          - openssl-devel
          - libffi-devel
          - zlib-devel
          - readline-devel
          - sqlite-devel
          - bzip2-devel
          - xz-devel
          - tk-devel
          - uuid-devel
          - gcc
          - gcc-c++
          - make
          - wget
          - xz
          - unzip
          - tar
          - systemd
        state: present

    - name: Create service users
      user:
        name: "{{ item }}"
        system: yes
        shell: /sbin/nologin
        create_home: no
      loop:
        - gitea
        - nexus
        - jenkins
        - sonarqube

    - name: Create app directories
      file:
        path: "{{ app_dir }}/{{ item }}"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
      loop:
        - gitea
        - nexus
        - jenkins
        - sonarqube

    - name: Create Java and Python directories
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ app_dir }}/openjdk21"
        - "{{ app_dir }}/python3"

    - name: Install Amazon Corretto JDK21
      unarchive:
        src: "{{ java_url }}"
        dest: "{{ app_dir }}/openjdk21"
        remote_src: yes
        creates: "{{ app_dir }}/openjdk21/bin/java"

    - name: Install Python 3.11
      shell: |
        cd /tmp
        if [ ! -f Python-3.11.11.tar.xz ]; then wget {{ python_url }}; fi
        tar -xf Python-3.11.11.tar.xz
        cd Python-3.11.11
        ./configure --prefix={{ app_dir }}/python3 --enable-optimizations
        make -j$(nproc)
        make install
      args:
        creates: "{{ app_dir }}/python3/bin/python3.11"

    - name: Download Golang
      get_url:
        url: "{{ golang_url }}"
        dest: "/tmp/golang.tar.gz"
        mode: '0644'
        force: no

    - name: Install Golang
      unarchive:
        src: "/tmp/golang.tar.gz"
        dest: "{{ app_dir }}"
        creates: "{{ app_dir }}/go"

    - name: Download Gitea binary
      get_url:
        url: "{{ gitea_url }}"
        dest: "{{ app_dir }}/gitea/gitea"
        mode: '0755'
        force: no

    - name: Setup Nexus
      unarchive:
        src: "{{ nexus_url }}"
        dest: "{{ app_dir }}/nexus"
        extra_opts: ["--strip-components=1"]
        remote_src: yes
        creates: "{{ app_dir }}/nexus/bin/nexus"

    - name: Download Jenkins WAR
      get_url:
        url: "{{ jenkins_url }}"
        dest: "{{ app_dir }}/jenkins/jenkins.war"
        mode: '0644'
        force: no

    - name: Setup SonarQube
      unarchive:
        src: "{{ sonarqube_url }}"
        dest: "{{ app_dir }}/sonarqube"
        remote_src: yes
        extra_opts: ["--strip-components=1"]
        creates: "{{ app_dir }}/sonarqube/bin"

    - name: Enable and start systemd services
      systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - gitea
        - nexus
        - jenkins
        - sonarqube